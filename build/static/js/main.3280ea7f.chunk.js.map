{"version":3,"sources":["components/ColorPanel/ColorPanel.js","firebase.js","components/SidePanel/UserPanel.js","actions/index.js","actions/types.js","components/SidePanel/Channels.js","components/SidePanel/DirectMessages.js","components/SidePanel/Starred.js","components/SidePanel/SidePanel.js","components/Messages/MessagesHeader.js","components/Messages/FileModal.js","components/Messages/ProgrssBar.js","components/Messages/MessageFrom.js","components/Messages/Message.js","components/Messages/Messages.js","components/MetaPanel/MetaPanel.js","components/App.js","serviceWorker.js","components/Auth/Login.js","components/Auth/Register.js","Reducers/index.js","Spinner.js","index.js"],"names":["ColorPanel","Sidebar","as","Menu","icon","vertical","inverted","visible","width","Divider","Button","size","color","React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","UserPanel","state","user","props","currentUser","dropdownOptions","key","text","displayName","disabled","onClick","handleSignOut","auth","signOut","then","console","log","this","Grid","style","background","Column","Row","padding","margin","Header","floated","Icon","name","Content","Dropdown","trigger","Image","src","photoURL","spaced","avatar","options","setCurrentChannel","channel","type","payload","currentChannel","setPrivateChannel","isPrivateChannel","Channels","channels","modal","channelName","channelDetails","channelsRef","database","ref","messagesRef","notifications","firstLoad","activeChannel","addListeners","loadedChannels","on","snap","push","val","setState","setFirstChannel","addNotificationListener","channelId","child","handleNotifications","id","currentChannelId","lastTotal","index","findIndex","notification","total","numChildren","count","lastKnownTotal","removeListeners","off","firstChannel","length","setActiveChannel","handleChange","event","target","value","changeChannel","clearNotification","updatedNotifications","getNotificationCount","forEach","displayChannels","map","Item","opacity","active","Label","addChannel","newChannel","details","createdBy","update","closeModal","catch","err","error","handleSubmit","preventDefault","isFormValid","openModal","Fragment","className","Modal","basic","open","onClose","Form","onSubmit","Field","Input","fluid","label","onChange","Actions","connect","DirectMessages","users","usersRef","connectedRef","presenceRef","currentUserUid","loadedUsers","set","onDisconnect","remove","addStatusToUser","userId","connected","updatedUser","reduce","acc","uid","concat","isUserOnline","status","channelData","getChannelId","currentUserId","fontStyle","Starred","starredChannels","SidePanel","fixed","fontSize","MessagesHeader","numUniqueUsers","handleSearchChange","Segment","clearing","marginBottom","Subheader","placeholder","FileModal","file","authorized","addFile","files","sendFile","uploadFile","isAuthorized","contentType","mime","lookup","clearFile","filename","includes","ProgressBar","uploadState","percentUploaded","Progress","percent","progress","indicating","MessageFrom","storageRef","storage","uploadTask","message","loading","errors","createMessage","fileUrl","timestamp","ServerValue","TIMESTAMP","sendMessage","getMessagesRef","getPath","metadata","pathToUpload","filePath","uuidv4","put","Math","round","bytesTransferred","totalBytes","isProgressBarVisible","snapshot","getDownloadURL","downloadUrl","sendFileMessage","labelPosition","some","Group","widths","content","isOwnMessage","Message","Comment","Avatar","Author","Metadata","moment","fromNow","hasOwnProperty","isImage","image","Text","Messages","privateChannel","privateMessagesRef","messages","messagesLoading","searchTerm","searchLoading","searchResults","addMessageListener","loadedMessages","countUniqueUsers","handleSearchMessages","channelMessages","regex","RegExp","match","uniqueUsers","plural","displayMessages","displayChannelName","MetaPanel","columns","marginLeft","Boolean","window","location","hostname","Login","email","password","displayErrors","i","signInWithEmailAndPassword","signedUser","handleInputError","inputName","toLowerCase","textAlign","verticalAlign","maxWidth","stacked","iconPosition","to","Register","username","passwordConfirmation","userRef","isFormEmpty","isPasswordValid","createUserWithEmailAndPassword","createdUser","updateProfile","md5","saveUser","initialUserState","isLoading","initialChannelState","rootReducer","combineReducers","action","Spinner","Dimmer","Loader","store","createStore","composeWithDevTools","Root","onAuthStateChanged","setUser","history","clearUser","exact","path","component","App","RootWithAuth","withRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3280ea7f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Sidebar, Divider, Button, Menu} from 'semantic-ui-react';\r\n\r\nclass ColorPanel extends React.Component{\r\n    render(){\r\n        return(\r\n            <Sidebar\r\n                    as={Menu}\r\n                    icon=\"labeled\"\r\n                    vertical\r\n                    inverted\r\n                    visible\r\n                    width=\"very thin\"    \r\n                >\r\n                    <Divider/>\r\n                    <Button icon=\"add\" size=\"small\" color=\"blue\"/>\r\n                </Sidebar>\r\n        );\r\n    }\r\n}\r\nexport default ColorPanel;","import firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport \"firebase/storage\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCmy7HZ589lb__W-W1xFSoe_PhUGzCuMy4\",\r\n    authDomain: \"react-chat-4277e.firebaseapp.com\",\r\n    databaseURL: \"https://react-chat-4277e.firebaseio.com\",\r\n    projectId: \"react-chat-4277e\",\r\n    storageBucket: \"react-chat-4277e.appspot.com\",\r\n    messagingSenderId: \"129156498174\",\r\n    appId: \"1:129156498174:web:6f7ee21bb079286ef49baf\",\r\n    measurementId: \"G-LQ59J6M676\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  // firebase.analytics();\r\n\r\n  export default firebase;","import React from 'react';\r\nimport {Grid, Header, Icon, Dropdown,Image} from 'semantic-ui-react';\r\nimport firebase from '../../firebase';\r\n\r\nclass UserPanel extends React.Component{\r\n    state={\r\n        user: this.props.currentUser,\r\n    }\r\n\r\n\r\n\r\n    dropdownOptions=()=>[\r\n        {\r\n            key:'user',\r\n            text: <span>Signed in as <strong>{this.state.user.displayName}</strong></span>,\r\n            disabled: true\r\n        },\r\n        {\r\n            key:'avatar',\r\n            text: <span>Change Avatar</span>\r\n        },\r\n        { \r\n            key:'signout',\r\n            text:<span onClick={this.handleSignOut}>Sign Out</span>\r\n        },\r\n    ];\r\n\r\n    handleSignOut=()=>{\r\n        firebase\r\n            .auth()\r\n            .signOut()\r\n            .then(()=>{\r\n                console.log('Signed out :)')\r\n            })\r\n    }\r\n\r\n    render(){\r\n        const {user} = this.state;\r\n        return(\r\n            <Grid style={{background: '#4c3c4c'}}>\r\n                <Grid.Column>\r\n                    <Grid.Row style={{padding:'1.2em', margin: 0}}>\r\n                        {/*App header */}\r\n                        <Header inverted floated=\"left\" as=\"h2\">\r\n                            <Icon name=\"code\" />\r\n                            <Header.Content>GaxChat</Header.Content>\r\n                        </Header> \r\n\r\n                    {/*User Dropdown */}\r\n                    <Header inverted as=\"h4\" style={{padding:'0.25em'}}>\r\n                        <Dropdown trigger={\r\n                            <span>\r\n                                <Image src={user.photoURL} spaced=\"right\" avatar/>\r\n                                {user.displayName}\r\n                            </span>\r\n                        } options={this.dropdownOptions()}/>\r\n                    </Header>\r\n                    </Grid.Row>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserPanel;","import * as actionTypes from './types';\r\n\r\n/* User Actions */\r\nexport const setUser = user =>{\r\n    return{\r\n        type :actionTypes.SET_USER,\r\n        payload:{\r\n            currentUser: user\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearUser = ()=>{\r\n    return{\r\n        type:actionTypes.CLEAR_USER,\r\n    }\r\n}\r\n\r\n/* Channel Actions */\r\n\r\nexport const setCurrentChannel = channel =>{\r\n    return{\r\n        type: actionTypes.SET_CURRENT_CHANNEL,\r\n        payload:{\r\n            currentChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const setPrivateChannel = isPrivateChannel =>{\r\n    return{\r\n        type: actionTypes.SET_PRIVATE_CHANNEL,\r\n        payload:{\r\n            isPrivateChannel\r\n        }\r\n    }\r\n}","/* User action Types */\r\nexport const SET_USER= \"SET_USER\";\r\nexport const CLEAR_USER = \"CLEAR_USER\";\r\n\r\n/* Channel action Types */\r\nexport const SET_CURRENT_CHANNEL =\"SET_CURRENT_CHANNEL\"; \r\nexport const SET_PRIVATE_CHANNEL =\"SET_PRIVATE_CHANNEL\";","import React from 'react';\r\nimport { Menu, Icon, Modal, Form,Input, Button, Label } from 'semantic-ui-react';\r\nimport firebase from '../../firebase';\r\nimport {connect} from 'react-redux';\r\nimport {setCurrentChannel,setPrivateChannel} from '../../actions';\r\n\r\nclass Channels extends React.Component{\r\n    state={\r\n        user: this.props.currentUser,\r\n        channels: [],\r\n        modal: false,\r\n        channelName: '',\r\n        channel: null,\r\n        channelDetails:'',\r\n        channelsRef: firebase.database().ref('channels'),\r\n        messagesRef: firebase.database().ref('messages'),\r\n        notifications: [],\r\n        firstLoad: true,\r\n        activeChannel : '',\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.addListeners()\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.removeListeners();\r\n    }\r\n\r\n    addListeners= ()=>{\r\n        let loadedChannels = [];\r\n        this.state.channelsRef.on('child_added', snap=>{             //This is the primary way to read data from a Database\r\n            loadedChannels.push(snap.val());                         //pushing the that particular value from database to the array\r\n            this.setState({channels : loadedChannels},()=>{this.setFirstChannel()});\r\n            this.addNotificationListener(snap.key); //takes id of every channel that is added to channel ref\r\n        });\r\n    };\r\n\r\n    addNotificationListener = channelId =>{\r\n        this.state.messagesRef.child(channelId).on('value', snap=>{ // listen to any added message in our channel\r\n            if(this.state.channel){\r\n                this.handleNotifications(channelId,this.state.channel.id,this.state.notifications,snap) //shows new messages of tghe channel on which the user is not currently on\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    handleNotifications = (channelId, currentChannelId, notifications, snap)=>{\r\n        let lastTotal=0;\r\n        let index =notifications.findIndex(notification => notification.id === channelId);\r\n\r\n        if(index !== -1){\r\n            if(channelId !== currentChannelId){\r\n                lastTotal = notifications[index].total;\r\n\r\n                if(snap.numChildren() - lastTotal > 0){     //most recent number of messages for channelx\r\n                    notifications[index].count = snap.numChildren() - lastTotal;\r\n                }\r\n            }\r\n            notifications[index].lastKnownTotal  = snap.numChildren();\r\n        } else{\r\n            notifications.push({    \r\n                id : channelId,\r\n                total : snap.numChildren(),  //number of messages\r\n                lastKnownTotal : snap.numChildren(),\r\n                count : 0\r\n            });\r\n        }\r\n\r\n        this.setState({ notifications })\r\n    }\r\n\r\n    removeListeners= ()=>{\r\n        this.state.channelsRef.off();\r\n    }\r\n\r\n    setFirstChannel= ()=>{\r\n        const firstChannel = this.state.channels[0];\r\n        if(this.state.firstLoad && this.state.channels.length > 0){\r\n            this.props.setCurrentChannel(firstChannel);\r\n            this.setActiveChannel(firstChannel);\r\n            this.setState({channel : firstChannel}) // notification to other channel without switching\r\n        }\r\n        this.setState({firstLoad : false});\r\n    }\r\n\r\n    handleChange= event =>{\r\n        this.setState({ [event.target.name] : event.target.value });\r\n    }\r\n\r\n    changeChannel=  channel =>{\r\n        this.setActiveChannel(channel);\r\n        this.clearNotification();\r\n        this.props.setCurrentChannel(channel);\r\n        this.props.setPrivateChannel(false);        //to switch back from direct messages to channel\r\n        this.setState({ channel });\r\n    };\r\n\r\n    clearNotification = () =>{\r\n         let index = this.state.notifications.findIndex(notification => notification.id === this.state.channel.id );\r\n         if( index !== -1){\r\n             let updatedNotifications= [...this.state.notifications];\r\n             updatedNotifications[index].total = this.state.notifications[index].lastKnownTotal;\r\n             updatedNotifications[index].count=0;\r\n             this.setState({\r\n                 notifications : updatedNotifications\r\n             });    \r\n         }\r\n    }\r\n\r\n    setActiveChannel = channel =>{\r\n        this.setState({activeChannel : channel.id})\r\n    }\r\n\r\n    getNotificationCount = channel =>{\r\n        let count =0;\r\n\r\n        this.state.notifications.forEach(notification =>{\r\n            if(notification.id === channel.id){\r\n                count = notification.count;\r\n            }\r\n        });\r\n\r\n        if(count > 0) return count;\r\n    }\r\n\r\n    displayChannels= channels =>(\r\n        channels.length > 0 && channels.map(channel=>(\r\n            <Menu.Item\r\n                key={channel.id}\r\n                onClick={()=>this.changeChannel(channel)}\r\n                name={channel.name}\r\n                style={{opacity: 0.7}}\r\n                active={channel.id === this.state.activeChannel}\r\n            >\r\n                {this.getNotificationCount(channel) && (\r\n                    <Label color=\"red\">{this.getNotificationCount(channel)}</Label>\r\n                )}\r\n                # {channel.name}\r\n            </Menu.Item>\r\n         ) )\r\n    )\r\n\r\n    addChannel=()=>{\r\n        const {channelsRef, channelName, channelDetails,user}= this.state;\r\n        const key= channelsRef.push().key  //to get a unique identifier\r\n        const newChannel={\r\n            id: key,\r\n            name: channelName,\r\n            details: channelDetails,\r\n            createdBy: {\r\n                name: user.displayName,\r\n                avatar: user.photoURL\r\n            }\r\n        }\r\n        channelsRef\r\n            .child(key)\r\n            .update(newChannel)\r\n            .then(()=>{\r\n                this.setState({channelName:'', channelDetails:''});\r\n                this.closeModal();\r\n                console.log('channel added');\r\n            })\r\n            .catch(err=>{\r\n                console.error(err);\r\n                console.log('gadbad ho gaya')\r\n            })\r\n    }\r\n\r\n    handleSubmit= event=>{\r\n        event.preventDefault();\r\n        if(this.isFormValid(this.state)){\r\n            this.addChannel();\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    isFormValid= ({channelName,channelDetails})=>channelName && channelDetails;\r\n    \r\n\r\n    openModal=()=> this.setState({ modal: true});\r\n    closeModal=()=> this.setState({ modal: false});\r\n\r\n    render(){\r\n        const {channels, modal}= this.state;\r\n        return(\r\n            <React.Fragment>        {/*To group 2 or more components*/}\r\n            <Menu.Menu className=\"menu\">     {/*Child of main menu component*/}\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name=\"exchange\"/> CHANNELS\r\n                    </span>{\" \"}\r\n                    ({channels.length}) <Icon name=\"add\" onClick={this.openModal}/>\r\n                </Menu.Item>\r\n                {this.displayChannels(channels)}\r\n            </Menu.Menu>\r\n\r\n            <Modal basic open={modal} onClose={this.closeModal}>\r\n                <Modal.Header>Add a channel </Modal.Header>\r\n                <Modal.Content>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Field>\r\n                            <Input \r\n                            fluid\r\n                            label=\"Name of Channel\"\r\n                            name=\"channelName\"\r\n                            onChange={this.handleChange} />\r\n\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            <Input \r\n                            fluid\r\n                            label=\"About the Channel\"\r\n                            name=\"channelDetails\"\r\n                            onChange={this.handleChange} />\r\n\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button color=\"green\" inverted onClick={this.handleSubmit}>\r\n                        <Icon name=\"checkmark\"/> Add \r\n                    </Button>\r\n                    <Button color=\"red\" inverted onClick={this.closeModal}>\r\n                        <Icon name=\"remove\" /> Cancel \r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null,{setCurrentChannel, setPrivateChannel})(Channels);\r\n","import React from 'react';\r\nimport firebase from '../../firebase';\r\nimport { connect } from 'react-redux';\r\nimport { setCurrentChannel, setPrivateChannel } from '../../actions';\r\nimport {Menu, Icon} from 'semantic-ui-react';\r\n\r\nclass DirectMessages extends React.Component{ \r\n    state={\r\n        activeChannel:'',\r\n        user: this.props.currentUser,\r\n        users: [],\r\n        usersRef: firebase.database().ref('users'),\r\n        connectedRef: firebase.database().ref('.info/connected'), // tells information about user status\r\n        presenceRef: firebase.database().ref('presence'),\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.state.user){\r\n            this.addListeners(this.state.user.uid);\r\n        }\r\n    }\r\n\r\n    addListeners = currentUserUid =>{\r\n        let loadedUsers= [];\r\n        this.state.usersRef.on('child_added', snap=>{\r\n            if(currentUserUid !==snap.key){     // this is because we don't want to add ourselves to the direct messages\r\n                let user= snap.val();\r\n                user['uid']=snap.key; // value of the snap\r\n                user['status']= 'offline';\r\n                loadedUsers.push(user);\r\n                this.setState({users : loadedUsers});\r\n            } \r\n        });\r\n\r\n        this.state.connectedRef.on('value',snap=>{    //tells information about metadata about each user\r\n            if(snap.val() === true){\r\n                const ref = this.state.presenceRef.child(currentUserUid);\r\n                ref.set(true);\r\n                ref.onDisconnect().remove(err =>{\r\n                    if(err !== null){\r\n                        console.log(err);\r\n                    }\r\n                })\r\n            }\r\n        });\r\n\r\n        this.state.presenceRef.on('child_added',snap =>{\r\n            if(currentUserUid !== snap.key){    // this is because we don't want to add ourselves to the direct messages\r\n                this.addStatusToUser(snap.key);\r\n            }\r\n        });\r\n\r\n        this.state.presenceRef.on('child_removed',snap =>{\r\n            if(currentUserUid !== snap.key){\r\n                this.addStatusToUser(snap.key,false)\r\n            }\r\n        });\r\n    }\r\n\r\n    addStatusToUser = (userId, connected= true)=>{\r\n        const updatedUser = this.state.users.reduce((acc,user)=>{\r\n            if(user.uid === userId){\r\n                user['status']=`${connected ? 'online' : 'offline'}`;\r\n            }\r\n            return acc.concat(user);\r\n        }, []);\r\n        this.setState({user: updatedUser});\r\n\r\n    }\r\n\r\n    isUserOnline = user => user.status === 'online';\r\n\r\n    changeChannel = user =>{\r\n        const channelId = this.getChannelId(user.uid);\r\n        const channelData= {\r\n            id: channelId,\r\n            name: user.name,\r\n        };\r\n        this.props.setCurrentChannel(channelData);\r\n        this.props.setPrivateChannel(true);\r\n        this.setActiveChannel(user.uid);\r\n    }\r\n\r\n    getChannelId = userId =>{\r\n        const currentUserId = this.state.user.uid;\r\n        return userId < currentUserId ? `${userId}/${currentUserId} `   //to create path of the channel\r\n        :`${currentUserId}/${userId}`;  \r\n    }\r\n\r\n    setActiveChannel = userId =>{\r\n        this.setState({ activeChannel : userId})\r\n    }\r\n\r\n    render(){\r\n        const {users,activeChannel}= this.state;\r\n        return(\r\n            <Menu.Menu className=\"menu\">\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name=\"mail\"/> DIRECT MESSAGES\r\n                    </span>{' '}\r\n                    ({ users.length })\r\n                </Menu.Item>\r\n                {users.map(user=>(\r\n                    <Menu.Item\r\n                        key={user.uid}\r\n                        active={user.uid === activeChannel}\r\n                        onClick={()=> this.changeChannel(user)}\r\n                        style={{opacity: 0.7, fontStyle: 'italic'}}\r\n                    >\r\n                        <Icon \r\n                            name=\"circle\"\r\n                            color={this.isUserOnline(user) ? 'green' : 'red'}\r\n                        />  \r\n                        @{user.name}\r\n                    </Menu.Item>\r\n                ))}\r\n            </Menu.Menu>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null,{ setCurrentChannel, setPrivateChannel })(DirectMessages);","import React from 'react';\r\nimport {Menu, Icon} from 'semantic-ui-react';\r\nimport {connect} from 'react-redux';\r\nimport {setCurrentChannel,setPrivateChannel} from '../../actions';\r\n\r\nclass Starred extends React.Component{\r\n    state={\r\n        activeChannel: '', \r\n        starredChannels: [],\r\n    }\r\n\r\n    setActiveChannel = channel =>{\r\n        this.setState({activeChannel : channel.id})\r\n    }\r\n\r\n    changeChannel=  channel =>{\r\n        this.setActiveChannel(channel);\r\n        this.props.setCurrentChannel(channel);\r\n        this.props.setPrivateChannel(false);        //to switch back from direct messages to channel\r\n    };\r\n\r\n    displayChannels= starredChannels =>(\r\n        starredChannels.length > 0 && starredChannels.map(channel=>(\r\n            <Menu.Item\r\n                key={channel.id}\r\n                onClick={()=>this.changeChannel(channel)}\r\n                name={channel.name}\r\n                style={{opacity: 0.7}}\r\n                active={channel.id === this.state.activeChannel}\r\n            >\r\n                # {channel.name}\r\n            </Menu.Item>\r\n         ) )\r\n    )\r\n\r\n    render(){\r\n        const {starredChannels} = this.state;\r\n        return(\r\n            <Menu.Menu className=\"menu\">     {/*Child of main menu component*/}\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name=\"star\"/> STARRED\r\n                    </span>{\" \"}\r\n                    ({starredChannels.length}) \r\n                </Menu.Item>\r\n                {this.displayChannels(starredChannels)}\r\n            </Menu.Menu>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null,{setCurrentChannel,setPrivateChannel})(Starred);","import React from 'react';\r\nimport {Menu} from 'semantic-ui-react'; \r\nimport UserPanel from './UserPanel';\r\nimport Channels from './Channels';\r\nimport DirectMessages from './DirectMessages';\r\nimport Starred from './Starred';\r\n\r\nclass SidePanel extends React.Component{\r\n    render(){\r\n        const {currentUser} = this.props;\r\n        return(\r\n            <Menu size=\"large\" inverted fixed=\"left\" vertical style={{background: '#4c3c4c', fontSize:'1.2rem'}}>\r\n                <UserPanel currentUser={currentUser}/>\r\n                <Starred />\r\n                <Channels currentUser={currentUser}/>\r\n                <DirectMessages currentUser={currentUser}/>\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\nexport default SidePanel;","import React from 'react';\r\nimport {Header, Segment, Icon, Input } from 'semantic-ui-react';\r\n\r\nclass MessagesHeader extends React.Component{\r\n    render(){\r\n        const { channelName,numUniqueUsers,handleSearchChange,isPrivateChannel }=this.props;\r\n        return(\r\n            <Segment clearing>       {/*clear fix on float items to one side or another */}\r\n            {/*Channel Title */}\r\n                <Header fluid=\"true\" as=\"h2\" floated=\"left\" style={{marginBottom : 0}}>\r\n                    <span>\r\n                        {channelName}\r\n                        {!isPrivateChannel && <Icon name={\"star outline\"} color=\"black\"/>} {/* To star or unstar a channel*/} \r\n                    </span>\r\n                    <Header.Subheader>{numUniqueUsers}</Header.Subheader>\r\n                </Header>\r\n\r\n            {/*Channel search    Input */}\r\n                <Header floated=\"right\">\r\n                    <Input\r\n                        onChange={handleSearchChange}\r\n                        size=\"mini\"\r\n                        icon=\"search\"\r\n                        name=\"searchTerm\"\r\n                        placeholder=\"Search Messages\"\r\n                    />\r\n                </Header>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessagesHeader;","import React from 'react';\r\nimport {Modal,Input,Icon,Button} from 'semantic-ui-react';\r\nimport mime from 'mime-types'; // to check file type\r\n\r\nclass FileModal extends React.Component{\r\n    state={\r\n        file: null,\r\n        authorized: ['image/jpeg' ,'image/png']\r\n\r\n    }\r\n\r\n    addFile= event =>{\r\n        const file= event.target.files[0];\r\n        console.log(file);\r\n        if(file){\r\n            this.setState({file});\r\n        }\r\n    };\r\n\r\n    sendFile= ()=>{\r\n        const {file} = this.state;\r\n        const {uploadFile,closeModal}= this.props;\r\n\r\n        if(file !==null){\r\n            if(this.isAuthorized(file.name)){\r\n                const metadata={contentType: mime.lookup(file.name)};\r\n                uploadFile(file,metadata);\r\n                closeModal();\r\n                this.clearFile();\r\n            }\r\n        }\r\n    }\r\n\r\n    isAuthorized= filename =>this.state.authorized.includes(mime.lookup(filename));     //compare the file type with state authorized\r\n\r\n    clearFile=()=>this.setState({file: null})\r\n    \r\n    render(){\r\n        const {modal, closeModal }= this.props; \r\n        return(\r\n            <Modal basic open={modal} onClose={closeModal}>\r\n                <Modal.Header>Select an Image File</Modal.Header>\r\n                <Modal.Content>\r\n                    <Input \r\n                        onChange={this.addFile}\r\n                        fluid\r\n                        label=\"File types: jpg , png\"\r\n                        name=\"file\"\r\n                        type=\"file\"\r\n                    />\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                        <Button \r\n                            onClick={this.sendFile}\r\n                            color=\"green\"\r\n                            inverted\r\n                        >\r\n                            <Icon name=\"checkmark\"/> Send\r\n                        </Button>\r\n                        <Button \r\n                            color=\"red\"\r\n                            inverted\r\n                            onClick={closeModal}\r\n                        >\r\n                            <Icon name=\"remove\"/> Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FileModal;\r\n","import React from 'react';\r\nimport {Progress} from 'semantic-ui-react';\r\n\r\nconst ProgressBar=({uploadState,percentUploaded})=>(\r\n    uploadState===\"uploading\" && (\r\n        <Progress\r\n            className=\"progress__bar\"\r\n            percent={percentUploaded}\r\n            progress\r\n            indicating\r\n            size=\"medium\"\r\n            inverted />\r\n    )\r\n\r\n)\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport uuidv4 from 'uuid/v4';       //creates a random string\r\nimport {Button, Segment, Input } from 'semantic-ui-react';\r\nimport firebase from '../../firebase';\r\nimport FileModal from './FileModal';\r\nimport ProgressBar from './ProgrssBar';\r\n\r\nclass MessageFrom extends React.Component{\r\n    state={\r\n        storageRef: firebase.storage().ref(), //way to store image\r\n        uploadTask: null,\r\n        uploadState: '',\r\n        percentUploaded: 0,\r\n        message: '',\r\n        loading: false,\r\n        channel: this.props.currentChannel,\r\n        user: this.props.currentUser,\r\n        errors: [],\r\n        modal: false,\r\n    };\r\n\r\n    openModal= ()=>this.setState({modal : true});\r\n    closeModal= ()=>this.setState({modal : false});\r\n\r\n\r\n    handleChange= event =>{\r\n        this.setState({ [event.target.name] : event.target.value})\r\n    }\r\n    createMessage= (fileUrl=null) =>{\r\n        const message={\r\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n            user:{\r\n                id: this.state.user.uid,\r\n                name: this.state.user.displayName,\r\n                avatar: this.state.user.photoURL,\r\n            },\r\n        };\r\n        if(fileUrl !== null){\r\n            message['image']=fileUrl;\r\n        }else{\r\n            message['content']=this.state.message;\r\n        }\r\n        return message\r\n    }\r\n\r\n    sendMessage= ()=>{\r\n        const {getMessagesRef}=this.props;\r\n        const {message,channel}= this.state;\r\n\r\n        if(message){\r\n            this.setState({loading: true});\r\n            getMessagesRef()\r\n                .child(channel.id)\r\n                .push()\r\n                .set(this.createMessage())\r\n                .then(()=>{\r\n                    this.setState({loading: false, message: '', errors: []})\r\n                })\r\n                .catch(err=>{\r\n                    console.error(err);\r\n                    this.setState({loading: false ,\r\n                        errors : this.state.errors.concat(err)\r\n                    })\r\n                })\r\n        }else{\r\n            this.setState({\r\n                errors: this.state.errors.concat({message: 'Add a message '})\r\n            })\r\n        }\r\n    }\r\n\r\n    getPath = ()=>{\r\n        if(this.props.isPrivateChannel){\r\n            return `chat/private-${this.state.channel.id}`;\r\n        } else{\r\n            return `chat/public`\r\n        }\r\n    }\r\n\r\n    uploadFile=(file,metadata)=>{\r\n        const pathToUpload =this.state.channel.id;\r\n        const ref= this.props.getMessagesRef();\r\n        const filePath=`${this.getPath()}${uuidv4()}.jpg`;\r\n\r\n        this.setState({\r\n            uploadState : 'uploading',\r\n            uploadTask: this.state.storageRef.child(filePath).put(file,metadata)    \r\n        },\r\n            ()=>{\r\n                this.state.uploadTask.on('state_changed', snap=>{\r\n                    const percentUploaded= Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n                    this.props.isProgressBarVisible(percentUploaded)\r\n                    this.setState({percentUploaded});\r\n                },\r\n            err=>{\r\n                console.log(err);\r\n                this.setState({\r\n                    errors: this.state.errors.concat(err),\r\n                    uploadState: 'error',\r\n                    uploadTask: null,\r\n                })\r\n            },\r\n            ()=>{\r\n                this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadUrl=>{\r\n                    this.sendFileMessage(downloadUrl,ref,pathToUpload);\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err);\r\n                    this.setState({\r\n                    errors: this.state.errors.concat(err),\r\n                    uploadState: 'error',\r\n                    uploadTask: null,\r\n                    })\r\n                })\r\n                })\r\n            }\r\n        )\r\n        \r\n    };\r\n\r\n    sendFileMessage= (fileUrl,ref,pathToUpload)=>{\r\n        ref.child(pathToUpload)\r\n            .push()\r\n            .set(this.createMessage(fileUrl))\r\n            .then(()=>{\r\n                this.setState({uploadState: 'done'})\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n                this.setState({errors: this.state.errors.concat(err)})\r\n            })\r\n    }\r\n\r\n    render(){\r\n        const{errors,message,loading,modal,uploadState,percentUploaded}=this.state;\r\n        return(\r\n            <Segment className=\"message__form\">\r\n                <Input\r\n                    fluid\r\n                    name=\"message\"\r\n                    onChange={this.handleChange}\r\n                    value={message}                 // clears the value in the field \r\n                    style={{marginBottom: '0.7em'}}\r\n                    label={<Button icon=\"add\"/>}\r\n                    labelPosition=\"left\"\r\n                    className={\r\n                        errors.some(error=>error.message.includes('message')) ? 'error' : \"\"\r\n                    }\r\n                    placeholder=\"Write your message\"\r\n                />\r\n                <Button.Group icon widths=\"2\">\r\n                    <Button \r\n                        onClick={this.sendMessage}\r\n                        color=\"orange\"\r\n                        disabled={loading}\r\n                        icon=\"edit\"\r\n                        content=\"Add Reply\"\r\n                        labelPosition=\"left\"\r\n                    />\r\n                    \r\n                    <Button \r\n                        color=\"teal\"\r\n                        disabled={uploadState === \"uploading\"}\r\n                        onClick={this.openModal}\r\n                        icon=\"cloud upload\"\r\n                        content=\"Upload Media\"\r\n                        labelPosition=\"right\"\r\n                    />\r\n                </Button.Group>\r\n                    <FileModal \r\n                        modal={modal}\r\n                        closeModal={this.closeModal}\r\n                        uploadFile={this.uploadFile}\r\n                    />\r\n                    <ProgressBar\r\n                        uploadState={uploadState}\r\n                        percentUploaded={percentUploaded}\r\n                    />\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageFrom;","import React from 'react';\r\nimport moment from 'moment';\r\nimport {Comment,Image} from 'semantic-ui-react';\r\n\r\nconst isOwnMessage=(message,user)=>{            //is authenticated user and creator of the message are same or not\r\n    return message.user.id === user.uid ? 'message__self' :'';\r\n};\r\n\r\nconst isImage= (message) =>{\r\n    return message.hasOwnProperty(\"image\") && !message.hasOwnProperty(\"content\");\r\n}\r\n\r\nconst timeFromNow = timestamp =>moment(timestamp).fromNow();\r\n\r\nconst Message =({message,user})=>(\r\n    <div>\r\n        <Comment>\r\n        <Comment.Avatar src={message.user.avatar} />\r\n        <Comment.Content className={isOwnMessage(message,user)}>\r\n            <Comment.Author as=\"a\">{message.user.name}</Comment.Author>\r\n            <Comment.Metadata>{timeFromNow(message.timestamp)}</Comment.Metadata>\r\n            {isImage(message) ? <Image src={message.image} className=\"message__image\"/>:\r\n            <Comment.Text>{message.content}</Comment.Text>}\r\n        </Comment.Content>\r\n    </Comment>\r\n    </div>\r\n);\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Segment,Comment} from 'semantic-ui-react';\r\nimport MessagesHeader from './MessagesHeader';\r\nimport MessageFrom from './MessageFrom';\r\nimport firebase from '../../firebase';\r\nimport Message from './Message';\r\n\r\nclass Messages extends React.Component{\r\n    state={\r\n        privateChannel: this.props.isPrivateChannel,\r\n        privateMessagesRef:firebase.database().ref('privateMessages') ,\r\n        messagesRef: firebase.database().ref('messages'),\r\n        channel: this.props.currentChannel,\r\n        user: this.props.currentUser,\r\n        messages: [],\r\n        messagesLoading:true,\r\n        ProgressBar: false,\r\n        numUniqueUsers: \"\",\r\n        searchTerm: '',\r\n        searchLoading: false,\r\n        searchResults: [],\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {channel,user}=this.state;\r\n        if(channel && user){\r\n            this.addListeners(channel.id);\r\n        }\r\n    }\r\n\r\n    addListeners = channelId=>{\r\n        this.addMessageListener(channelId);\r\n    }\r\n\r\n    addMessageListener=channelId=>{\r\n        let loadedMessages=[];\r\n        const ref =this.getMessagesRef();\r\n        ref.child(channelId).on('child_added', snap=>{\r\n            loadedMessages.push(snap.val());\r\n            //console.log(loadedMessages); \r\n            this.setState({\r\n                messages: loadedMessages,\r\n                messagesLoading: false,\r\n                \r\n            });\r\n            this.countUniqueUsers(loadedMessages);\r\n        })\r\n    }\r\n\r\n    getMessagesRef= () =>{\r\n        const { messagesRef, privateMessagesRef, privateChannel}= this.state;\r\n        return privateChannel ? privateMessagesRef : messagesRef;\r\n    }\r\n\r\n    handleSearchChange = event =>{\r\n        this.setState({\r\n            searchTerm: event.target.value,\r\n            searchLoading: true\r\n        }, ()=>this.handleSearchMessages());\r\n    }\r\n\r\n    handleSearchMessages= () =>{\r\n        const channelMessages= [...this.state.messages];    // copy messages so the original values are not mutated\r\n        const regex = new RegExp(this.state.searchTerm,'gi');\r\n        const searchResults = channelMessages.reduce((acc,message)=>{\r\n            if(message.content && message.content.match(regex)){\r\n                acc.push(message);\r\n            }\r\n            return acc;\r\n        },[]);\r\n        this.setState({ searchResults });\r\n    }\r\n    \r\n    countUniqueUsers= messages =>{\r\n        const uniqueUsers = messages.reduce((acc,message)=>{\r\n            if(!acc.includes(message.user.name)){\r\n                acc.push(message.user.name)\r\n            }\r\n            return acc;\r\n        },[]);\r\n        const plural= uniqueUsers.length >1 || uniqueUsers.length === 0;\r\n        const numUniqueUsers=`${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\r\n        this.setState({ numUniqueUsers })\r\n    }\r\n\r\n    displayMessages= messages =>(\r\n        messages.length > 0 && messages.map(message=>(\r\n            <Message\r\n                key={message.timestamp}      // since we are iterating over it\r\n                message={message}\r\n                user={this.state.user}\r\n            />\r\n        ))\r\n    );\r\n\r\n    isProgressBarVisible =percent =>{\r\n        if(percent > 0){\r\n            this.setState({\r\n                ProgressBar: true\r\n            });\r\n        }\r\n    }\r\n\r\n    displayChannelName= channel =>{\r\n        return channel ? `${this.state.privateChannel ? '@' : '#'}${channel.name}`: '';\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        const {messagesRef,channel,user,messages,ProgressBar,numUniqueUsers, searchResults,searchTerm, privateChannel} =this.state;\r\n        return(\r\n            <React.Fragment>\r\n                <MessagesHeader\r\n                    channelName ={this.displayChannelName(channel)}\r\n                    numUniqueUsers ={numUniqueUsers}\r\n                    handleSearchChange={this.handleSearchChange}\r\n                    isPrivateChannel={privateChannel} //Basically to show start icon\r\n                />\r\n\r\n                <Segment>\r\n                    <Comment.Group className={ProgressBar ? 'messages__progress' : 'messages'}>\r\n                        {searchTerm ? this.displayMessages(searchResults) : this.displayMessages(messages)}\r\n                    </Comment.Group>\r\n                </Segment>\r\n\r\n                <MessageFrom \r\n                    messagesRef={messagesRef}\r\n                    currentChannel={channel}\r\n                    currentUser={user}\r\n                    isProgressBarVisible={this.isProgressBarVisible}\r\n                    isPrivateChannel={privateChannel}\r\n                    getMessagesRef={this.getMessagesRef}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Messages;","import React from 'react';\r\n\r\nclass MetaPanel extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>MetaPanel</div>\r\n        )\r\n    }\r\n}\r\nexport default MetaPanel;","import React from 'react';\nimport './App.css';\nimport {Grid} from 'semantic-ui-react';\nimport {connect} from 'react-redux';\n\nimport ColorPanel from './ColorPanel/ColorPanel';\nimport SidePanel from './SidePanel/SidePanel';\nimport Messages from './Messages/Messages';\nimport MetaPanel from './MetaPanel/MetaPanel';\n\n\nconst App =({currentUser, currentChannel, isPrivateChannel})=>(\n  <Grid columns=\"equal\" className=\"app\" style={{background: '#eee'}}>\n    <ColorPanel />\n    <SidePanel \n    key={currentUser && currentUser.id}\n    currentUser={currentUser}/>\n    <Grid.Column style={{marginLeft: 320}}>\n      <Messages\n        key={currentChannel && currentChannel.id}   //when providing props to multiple components we need to provide a unique identifier a key\n        currentChannel={currentChannel}\n        currentUser={currentUser}\n        isPrivateChannel={isPrivateChannel}\n      />\n    </Grid.Column>\n\n\n    <Grid.Column width={4}>\n      <MetaPanel />\n    </Grid.Column>\n  </Grid> \n)\n\nconst mapStateToProps = state =>({\n  currentUser: state.user.currentUser,     //taking current user value and passing it as props to SidePanel which again send this value to UserPanel as a prop\n  currentChannel: state.channel.currentChannel,  //taking current user value and passing it as props to Messages which again send this value to MessageForm as a prop\n  isPrivateChannel: state.channel.isPrivateChannel\n})\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {Grid,Form,Segment,Button,Header,Message,Icon} from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\n\r\nclass Login extends React.Component{\r\n    state= {\r\n        email:'',\r\n        password:'',\r\n        errors:[],\r\n        loading: false,\r\n    }\r\n\r\n\r\ndisplayErrors=errors => errors.map((error,i)=><p key={i}>{error.message}</p>)\r\n\r\n    handleChange= event =>{\r\n        this.setState({ [event.target.name]: event.target.value})\r\n    }\r\n\r\n    handleSubmit= event =>{\r\n        event.preventDefault();  // Prevents reloading of page\r\n        if(this.isFormValid(this.state)){\r\n            this.setState({errors:[], loading: true})\r\n            firebase\r\n                .auth()\r\n                .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n                .then(signedUser=>{\r\n                   // console.log(signedUser);\r\n                })\r\n                .catch(err =>{\r\n                    console.error(err);\r\n                    this.setState({\r\n                        errors : this.state.errors.concat(err),\r\n                        loading: false,\r\n\r\n                    });\r\n                })\r\n        }\r\n    }\r\n\r\n    isFormValid=({email, password})=>email && password;\r\n\r\n    handleInputError = (errors,inputName) =>{\r\n        return errors.some(error=>error.message.toLowerCase().includes(inputName))? 'error' : ''  //to make a class of a input field in error type\r\n    }\r\n\r\n    render(){\r\n        const {email, password,errors,loading}= this.state;    //Destructuring\r\n        return(\r\n           <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n               <Grid.Column style={{maxWidth :450}}>\r\n                   <Header as=\"h1\" icon color=\"violet\" textAlign=\"center\">\r\n                       <Icon name=\"code branch\" color=\"violet\"/>\r\n                        Login to GaxChat\r\n                   </Header>\r\n                   <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                       <Segment stacked>\r\n                           <Form.Input fluid name=\"email\" icon=\"mail\" iconPosition=\"left\" placeholder=\"Email Address\" onChange={this.handleChange} value={email} className={this.handleInputError(errors,'email')} type=\"email\"/>\r\n                           <Form.Input fluid name=\"password\" icon=\"lock\" iconPosition=\"left\" placeholder=\"Password\" value={password} onChange={this.handleChange} className={this.handleInputError(errors,'password')} type=\"password\"/>\r\n                           <Button color=\"violet\" disabled={loading} className={loading ? 'loading': ''} fluid size=\"large\">Submit</Button>\r\n                       </Segment>\r\n                   </Form>\r\n                   {errors.length >0 && (\r\n                       <Message error>\r\n                           <h3>Error</h3>\r\n                           {this.displayErrors(errors)}\r\n                       </Message>\r\n                   )}\r\n                   <Message>Don't have an Account ? <Link to=\"/register\">Register</Link></Message>\r\n               </Grid.Column>\r\n           </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport {Grid,Form,Segment,Button,Header,Message,Icon} from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport md5 from 'md5';\r\n\r\nclass Register extends React.Component{\r\n    state= {\r\n        username:'',\r\n        email:'',\r\n        password:'',\r\n        passwordConfirmation:\"\",\r\n        errors:[],\r\n        loading: false,\r\n        userRef: firebase.database().ref('users'),\r\n    }\r\n    isFormValid= () =>{\r\n        let errors=[];\r\n        let error;\r\n\r\n\r\n        if(this.isFormEmpty(this.state)){\r\n            error= {message: 'Fill all the fields'}\r\n            this.setState({errors:errors.concat(error)});\r\n            return false;\r\n        } else if(!this.isPasswordValid(this.state)){\r\n            error= {message: 'Invalid Password'}\r\n            this.setState({errors:errors.concat(error)});\r\n            return false;\r\n\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    isFormEmpty= ({username,email,password,passwordConfirmation})=>{\r\n        return !username.length || !email.length || !password.length || !passwordConfirmation.length;\r\n    }\r\n\r\n    isPasswordValid=({password,passwordConfirmation})=>{\r\n        if(password.length<6 || passwordConfirmation.length<6){\r\n            return false;\r\n        }else if(password !== passwordConfirmation){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\ndisplayErrors=errors => errors.map((error,i)=><p key={i}>{error.message}</p>)\r\n\r\n    handleChange= event =>{\r\n        this.setState({ [event.target.name]: event.target.value})\r\n    }\r\n\r\n    handleSubmit= event =>{\r\n        event.preventDefault();  // Prevents reloading of page\r\n        if(this.isFormValid()){\r\n            this.setState({errors:[], loading: true})\r\n            firebase\r\n                .auth()                         //for use of authorization tools\r\n                .createUserWithEmailAndPassword(this.state.email, this.state.password)       //to register user\r\n                .then(createdUser =>{\r\n                    console.log(createdUser);\r\n                    createdUser.user.updateProfile({\r\n                        displayName:this.state.username,\r\n                        photoURL:`http://gravatar.com/avatar/${md5(createdUser.user.email)}?d=identicon`\r\n                    })\r\n                    .then(()=>{\r\n                        this.saveUser(createdUser).then(()=>{\r\n                            console.log(\"User Saved\")\r\n                        })\r\n                    })\r\n                    .catch(err=>{\r\n                        console.error(err);\r\n                        this.setState({errors: this.state.errors.concat(err),loading:false});\r\n                    })\r\n                })\r\n                .catch(err=>{\r\n                    console.error(err);\r\n                    this.setState({errors: this.state.errors.concat(err),loading:false});\r\n                })\r\n        }\r\n    }\r\n\r\n    saveUser= createdUser =>{\r\n         return this.state.userRef.child(createdUser.user.uid).set({\r\n             name: createdUser.user.displayName,\r\n             avatar: createdUser.user.photoURL\r\n         })\r\n    }\r\n\r\n    handleInputError = (errors,inputName) =>{\r\n        return errors.some(error=>error.message.toLowerCase().includes(inputName))? 'error' : ''  //to make a class of a input field in error type\r\n    }\r\n\r\n    render(){\r\n        const {username, email, password, passwordConfirmation, errors,loading}= this.state;    //Destructuring\r\n        return(\r\n           <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n               <Grid.Column style={{maxWidth :450}}>\r\n                   <Header as=\"h1\" icon color=\"orange\" textAlign=\"center\">\r\n                       <Icon name=\"puzzle piece\" color=\"orange\"/>\r\n                        Register to GaxChat\r\n                   </Header>\r\n                   <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                       <Segment stacked>\r\n                           <Form.Input fluid name=\"username\" icon=\"user\" iconPosition=\"left\" placeholder=\"Username\" onChange={this.handleChange} value={username}  type=\"text\" />     \r\n                           <Form.Input fluid name=\"email\" icon=\"mail\" iconPosition=\"left\" placeholder=\"Email Address\" onChange={this.handleChange} value={email} className={this.handleInputError(errors,'email')} type=\"email\"/>\r\n                           <Form.Input fluid name=\"password\" icon=\"lock\" iconPosition=\"left\" placeholder=\"Password\" value={password} onChange={this.handleChange} className={this.handleInputError(errors,'password')} type=\"password\"/>\r\n                           <Form.Input fluid name=\"passwordConfirmation\" icon=\"repeat\" iconPosition=\"left\" placeholder=\"Password Confirmation\" value={passwordConfirmation} onChange={this.handleChange} className={this.handleInputError(errors,'password')} type=\"password\"/>\r\n                           <Button color=\"orange\" disabled={loading} className={loading ? 'loading': ''} fluid size=\"large\">Submit</Button>\r\n                       </Segment>\r\n                   </Form>\r\n                   {errors.length >0 && (\r\n                       <Message error>\r\n                           <h3>Error</h3>\r\n                           {this.displayErrors(errors)}\r\n                       </Message>\r\n                   )}\r\n                   <Message>Already a user ? <Link to=\"/login\">Login</Link></Message>\r\n               </Grid.Column>\r\n           </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;","import {combineReducers} from 'redux';\r\nimport * as actionTypes from '../actions/types';\r\n\r\n\r\nconst initialUserState ={\r\n    currentUser: null,\r\n    isLoading: true\r\n};\r\n\r\nconst user_reducer =(state=initialUserState, action)=>{\r\n    switch (action.type){\r\n        case actionTypes.SET_USER :\r\n            return{\r\n                currentUser : action.payload.currentUser,\r\n                isLoading   : false\r\n            };\r\n        case actionTypes.CLEAR_USER :\r\n            return{\r\n                ...state,\r\n                isLoading: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialChannelState={\r\n    currentChannel: null,\r\n    isPrivateChannel: false,\r\n}\r\n\r\nconst channel_reducer=(state=initialChannelState,action)=>{\r\n    switch (action.type) {\r\n        case actionTypes.SET_CURRENT_CHANNEL:\r\n            return{\r\n                ...state,\r\n                currentChannel: action.payload.currentChannel,\r\n            }\r\n\r\n        case actionTypes.SET_PRIVATE_CHANNEL:\r\n            return{\r\n                ...state,\r\n                isPrivateChannel:action.payload.isPrivateChannel,\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer= combineReducers({\r\n    user: user_reducer,\r\n    channel: channel_reducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport {Loader,Dimmer} from 'semantic-ui-react';\r\n\r\nconst Spinner = ()=>(\r\n    <Dimmer active> \r\n    <Loader size=\"huge\" content=\"Preparing Chat....\"/>\r\n    </Dimmer> \r\n)\r\n\r\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\n\nimport {BrowserRouter as Router,Switch,Route,withRouter} from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport firebase from './firebase';\nimport {createStore} from 'redux';\nimport {Provider, connect} from 'react-redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport rootReducer from './Reducers';\nimport {setUser,clearUser} from './actions';\nimport Spinner from './Spinner';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nclass Root extends React.Component{\n  componentDidMount(){\n    firebase.auth().onAuthStateChanged(user=>{            //checks if a user is logged in or not\n      if(user){\n        //console.log(user);\n        this.props.setUser(user);\n        this.props.history.push('/')//Redirect to home route\n      }else{\n        this.props.history.push('/login');\n        this.props.clearUser();\n      }\n    })\n  }\n  render(){\n    return this.props.isLoading ? <Spinner /> :(\n\n        <Switch>\n          <Route exact path=\"/\" component={App} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n        </Switch>\n\n    )\n  }\n}\n\nconst mapStateFromProps = state =>({\n  isLoading : state.user.isLoading\n})\n\nconst RootWithAuth = withRouter(connect(mapStateFromProps,{setUser,clearUser})(Root))\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <RootWithAuth />\n    </Router>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}